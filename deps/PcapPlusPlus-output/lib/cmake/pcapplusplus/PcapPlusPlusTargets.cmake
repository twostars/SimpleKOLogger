# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.3")
   message(FATAL_ERROR "CMake >= 2.8.3 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.3...3.26)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS PcapPlusPlus::light_pcapng PcapPlusPlus::Packet++ PcapPlusPlus::Pcap++ PcapPlusPlus::Common++ PcapPlusPlus::Arping PcapPlusPlus::ArpSpoofing PcapPlusPlus::DNSResolver PcapPlusPlus::DnsSpoofing PcapPlusPlus::HttpAnalyzer PcapPlusPlus::IcmpFileTransfer-catcher PcapPlusPlus::IcmpFileTransfer-pitcher PcapPlusPlus::IPDefragUtil PcapPlusPlus::IPFragUtil PcapPlusPlus::benchmark PcapPlusPlus::PcapPrinter PcapPlusPlus::PcapSearch PcapPlusPlus::PcapSplitter PcapPlusPlus::SSLAnalyzer PcapPlusPlus::TcpReassembly PcapPlusPlus::TLSFingerprinting)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target PcapPlusPlus::light_pcapng
add_library(PcapPlusPlus::light_pcapng INTERFACE IMPORTED)

set_target_properties(PcapPlusPlus::light_pcapng PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "UNIVERSAL"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
)

# Create imported target PcapPlusPlus::Packet++
add_library(PcapPlusPlus::Packet++ STATIC IMPORTED)

set_target_properties(PcapPlusPlus::Packet++ PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/pcapplusplus"
  INTERFACE_LINK_LIBRARIES "PcapPlusPlus::Common++"
)

# Create imported target PcapPlusPlus::Pcap++
add_library(PcapPlusPlus::Pcap++ STATIC IMPORTED)

set_target_properties(PcapPlusPlus::Pcap++ PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "HAVE_REMOTE;WPCAP"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/pcapplusplus"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:ws2_32>;\$<LINK_ONLY:iphlpapi>;Packet::Packet;PcapPlusPlus::Common++;PcapPlusPlus::Packet++;\$<\$<BOOL:OFF>:PF_RING::PF_RING>;\$<\$<BOOL:OFF>:DPDK::DPDK>;\$<\$<BOOL:OFF>:BPF::BPF>;PCAP::PCAP;Threads::Threads"
)

# Create imported target PcapPlusPlus::Common++
add_library(PcapPlusPlus::Common++ STATIC IMPORTED)

set_target_properties(PcapPlusPlus::Common++ PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include/pcapplusplus"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:ws2_32>;\$<LINK_ONLY:iphlpapi>"
)

# Create imported target PcapPlusPlus::Arping
add_executable(PcapPlusPlus::Arping IMPORTED)

# Create imported target PcapPlusPlus::ArpSpoofing
add_executable(PcapPlusPlus::ArpSpoofing IMPORTED)

# Create imported target PcapPlusPlus::DNSResolver
add_executable(PcapPlusPlus::DNSResolver IMPORTED)

# Create imported target PcapPlusPlus::DnsSpoofing
add_executable(PcapPlusPlus::DnsSpoofing IMPORTED)

# Create imported target PcapPlusPlus::HttpAnalyzer
add_executable(PcapPlusPlus::HttpAnalyzer IMPORTED)

# Create imported target PcapPlusPlus::IcmpFileTransfer-catcher
add_executable(PcapPlusPlus::IcmpFileTransfer-catcher IMPORTED)

# Create imported target PcapPlusPlus::IcmpFileTransfer-pitcher
add_executable(PcapPlusPlus::IcmpFileTransfer-pitcher IMPORTED)

# Create imported target PcapPlusPlus::IPDefragUtil
add_executable(PcapPlusPlus::IPDefragUtil IMPORTED)

# Create imported target PcapPlusPlus::IPFragUtil
add_executable(PcapPlusPlus::IPFragUtil IMPORTED)

# Create imported target PcapPlusPlus::benchmark
add_executable(PcapPlusPlus::benchmark IMPORTED)

# Create imported target PcapPlusPlus::PcapPrinter
add_executable(PcapPlusPlus::PcapPrinter IMPORTED)

# Create imported target PcapPlusPlus::PcapSearch
add_executable(PcapPlusPlus::PcapSearch IMPORTED)

# Create imported target PcapPlusPlus::PcapSplitter
add_executable(PcapPlusPlus::PcapSplitter IMPORTED)

# Create imported target PcapPlusPlus::SSLAnalyzer
add_executable(PcapPlusPlus::SSLAnalyzer IMPORTED)

# Create imported target PcapPlusPlus::TcpReassembly
add_executable(PcapPlusPlus::TcpReassembly IMPORTED)

# Create imported target PcapPlusPlus::TLSFingerprinting
add_executable(PcapPlusPlus::TLSFingerprinting IMPORTED)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/PcapPlusPlusTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
    if(NOT EXISTS "${_cmake_file}")
      message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
